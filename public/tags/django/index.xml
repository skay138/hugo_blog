<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Django on ThxKyu CODE</title>
        <link>https://skay138.github.io/tags/django/</link>
        <description>Recent content in Django on ThxKyu CODE</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Fri, 16 Feb 2024 00:00:00 +0900</lastBuildDate><atom:link href="https://skay138.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[Django] API 성능을 개선해보자 : 캐싱</title>
        <link>https://skay138.github.io/p/django-api-improvement-cache/</link>
        <pubDate>Fri, 16 Feb 2024 00:00:00 +0900</pubDate>
        
        <guid>https://skay138.github.io/p/django-api-improvement-cache/</guid>
        <description>&lt;img src="https://skay138.github.io/cover/django.png" alt="Featured image of post [Django] API 성능을 개선해보자 : 캐싱" /&gt;&lt;h2 id=&#34;캐싱이란&#34;&gt;캐싱이란?&lt;/h2&gt;
&lt;p&gt;캐싱은 데이터나 계산 결과를 임시 저장소에 저장하는 프로세스를 말한다. 이는 데이터나 계산 결과를 나중에 빠르게 검색하거나 재사용할 수 있게 해준다.&lt;br&gt;
캐싱은 방법에 따라 메모리나 디스크, DB등에 저장할 수 있다.
내 프로젝트는 현재 sqlite3이라는 내장DB를 하는데, 보통은 DB서버를 두는 게 일반적이다. 따라서 테스트를 위해 DB서버를 열고 연결해 주었다.&lt;/p&gt;
&lt;h2 id=&#34;분석에-사용한-도구&#34;&gt;분석에 사용한 도구&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Postman : 단일 API 호출과 Runner를 이용해 테스트를 진행했다.&lt;/li&gt;
&lt;li&gt;Django-debug-toolbar : SQL이 어떻게 호출되는지 확인하는 데 사용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;전체공개-게시글-리스트를-호출하는-api&#34;&gt;전체공개 게시글 리스트를 호출하는 API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;글 : 10000개&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;개선-전&#34;&gt;개선 전&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-cache/1.png&#34;
	width=&#34;910&#34;
	height=&#34;74&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1229&#34;
		data-flex-basis=&#34;2951px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;현재는 API를 호출할 때마다 쿼리 호출을 통해 DB에서 데이터를 받아 전달한다.&lt;/p&gt;
&lt;h3 id=&#34;개선-과정&#34;&gt;개선 과정&lt;/h3&gt;
&lt;h4 id=&#34;redis&#34;&gt;Redis&lt;/h4&gt;
&lt;p&gt;Redis는 메모리 기반의 데이터 저장소이자 오픈 소스의 키-값 데이터 구조 저장소이다. 이를 이용하여 전체공개 게시글에 대해 캐싱을 해두고,데이터에 대해 변경이 있을 때만 업데이트했다.&lt;/p&gt;
&lt;h4 id=&#34;왜-전체-공개-게시글인가&#34;&gt;왜 전체 공개 게시글인가?&lt;/h4&gt;
&lt;p&gt;캐싱을 이용하는 이유는&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터 액세스 빈도가 높은 경우&lt;/li&gt;
&lt;li&gt;네트워크 대역폭 절약&lt;/li&gt;
&lt;li&gt;서버 부하 감소&lt;/li&gt;
&lt;li&gt;실시간성이 필요하지 않은 데이터&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;정도로 볼 수 있다. 그중 전체 게시글에 적용한 이유는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;FUNSUN의 특성상 전체 공개 게시글의 업데이트 빈도는 낮으리라 예상했다.&lt;/li&gt;
&lt;li&gt;검색 화면으로 진입 시 보여야 하는 데이터이기에 호출 빈도가 높을 것이라고 예상했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;고려-사항&#34;&gt;고려 사항&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;캐싱 제한&lt;/strong&gt;&lt;br&gt;
광고등의 도배성 게시글로 인해 public 게시글에 대해 짧은 시간에 많은 POST 요청이 생길 수 있다는 약점을 고려하고 싶었기에 업데이트가 필요할 시 5초에 한번만 캐싱하게끔 제한을 걸었다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;코드의 작성&lt;/strong&gt;&lt;br&gt;
READ를 제외한 CUD함수마다 코드를 중복하여 작성하고 싶지 않았기에 처음에는 미들웨어에서 제어하려고 했다. 하지만 이 방법은 요청 시 수행되는 작업이기 때문에 정작 업데이트되야 하는 정보가 반영이 안됐다. 이는 Funding 모델에 update_cache_if_public함수를 만들어 중복을 최소화했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;개선-후&#34;&gt;개선 후&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-cache/2.png&#34;
	width=&#34;899&#34;
	height=&#34;77&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1167&#34;
		data-flex-basis=&#34;2802px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Redis를 통해 데이터베이스 호출 없이 게시글을 불러옴으로써 Response Time을 줄일 수 있었다.&lt;/p&gt;
&lt;h2 id=&#34;추가-내용&#34;&gt;추가 내용&lt;/h2&gt;
&lt;h3 id=&#34;추가적으로-적용될-수-있는-api는-무엇이-있을까&#34;&gt;추가적으로 적용될 수 있는 API는 무엇이 있을까&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;사용자 프로필&lt;/strong&gt; : 정보를 한번 등록하면 업데이트가 자주 일어나지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;펀딩한 게시글 리스트&lt;/strong&gt; : 개인 마다의 업데이트 빈도가 짧지 않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;데이터-중복에-대하여&#34;&gt;데이터 중복에 대하여&lt;/h3&gt;
&lt;p&gt;결국 캐싱을 한다는 것은 사실 데이터를 중복으로 가지고 있는 것과 같다. 디스크과 메모리에 있어서 리소스 낭비가 일어날 수 있기에 캐싱을 남발하는 것은 주의해야 할 것 같다. 적절한 데이터를 엄선하여 캐싱하는 것이 캐싱을 구현하는 것보다 훨씬 어려웠다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>[Django] API 성능을 개선해보자 : N&#43;1문제</title>
        <link>https://skay138.github.io/p/django-api-improvement-nplus1/</link>
        <pubDate>Thu, 15 Feb 2024 00:00:00 +0900</pubDate>
        
        <guid>https://skay138.github.io/p/django-api-improvement-nplus1/</guid>
        <description>&lt;img src="https://skay138.github.io/cover/django.png" alt="Featured image of post [Django] API 성능을 개선해보자 : N&#43;1문제" /&gt;&lt;h2 id=&#34;n1-문제란&#34;&gt;N+1 문제란?&lt;/h2&gt;
&lt;p&gt;N+1 문제는 데이터베이스 쿼리를 처리하는 동안 발생할 수 있는 성능 문제 중 하나다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;테이블의 데이터(댓글)을 가져오기 위해 쿼리를 실행한다(N번).&lt;/li&gt;
&lt;li&gt;각 데이터 마다 추가 정보(작성자)를 가져오기 위해 별도의 쿼리를 실행한다(1번).&lt;/li&gt;
&lt;li&gt;결과적으로 N번의 실행 이후 N개의 추가 쿼리 실행이 일어난다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;분석에-사용한-도구&#34;&gt;분석에 사용한 도구&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Postman : 단일 API 호출과 Runner를 이용해 테스트를 진행했다.&lt;/li&gt;
&lt;li&gt;Django-debug-toolbar : SQL이 어떻게 호출되는지 확인하는 데 사용했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;단일-게시글의-댓글을-호출하는-api&#34;&gt;단일 게시글의 댓글을 호출하는 API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;댓글 : 100개&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;개선-전&#34;&gt;개선 전&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/1.png&#34;
	width=&#34;859&#34;
	height=&#34;66&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Postman Runner&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1301&#34;
		data-flex-basis=&#34;3123px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/2.png&#34;
	width=&#34;1743&#34;
	height=&#34;872&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;202 queries in 37.14ms&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;479px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;쿼리를 202번이나 호출한다.&lt;/p&gt;
&lt;h3 id=&#34;개선-과정&#34;&gt;개선 과정&lt;/h3&gt;
&lt;h4 id=&#34;select_related와-prefetch_related&#34;&gt;select_related()와 prefetch_related()&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;select_related()&lt;/strong&gt; : 일대일 및 외래 키 관계에 사용하며, 단일 쿼리를 사용하여 관련된 객체를 가져온다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;prefetch_related()&lt;/strong&gt; : 다대다 및 역방향 관계에 사용하며, 별도의 추가 쿼리를 사용하여 관련된 객체를 가져와 메모리에서 조합한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나의 경우, 외래 키 관계였기에 select_related()를 이용하여 댓글 데이터를 가져올 때 작성자에 대한 정보도 미리 로드하여 추가적인 쿼리 호출을 막았다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/3.png&#34;
	width=&#34;1738&#34;
	height=&#34;871&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;102 queries in 36.57ms&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;478px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;그럼에도 쿼리 호출 결과는 202→102번으로 만족스럽지 못했고, 다시 검토했음에도 select_related()를 포함한 함수안에서는 특별히 이상이 있는 코드는 없었다. 문제를 파악하기 위해 댓글 객체를 이용하는 코드들을 따라가 분석해보니 serializer가 데이터를 직렬화하는 과정에서 그 이유를 찾을 수 있었다.&lt;br&gt;
댓글의 작성자 정보를 추가할 때 쿼리 호출을 하고 있었고, 이는 외래키 참조를 통해 해결했다.&lt;/p&gt;
&lt;p&gt;민망한 코드였다.&lt;/p&gt;
&lt;h3 id=&#34;개선-후&#34;&gt;개선 후&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/4.png&#34;
	width=&#34;847&#34;
	height=&#34;73&#34;
	
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1160&#34;
		data-flex-basis=&#34;2784px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/5.png&#34;
	width=&#34;1740&#34;
	height=&#34;871&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2 queries in 1.11ms&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;479px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;쿼리 호출 수를 비약적으로 줄인 결과 평균 응답 시간이 10배 넘게 줄었다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/6.png&#34;
	width=&#34;832&#34;
	height=&#34;73&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;페이징 적용&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1139&#34;
		data-flex-basis=&#34;2735px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;페이징을 통해 한 번에 8개의 댓글만 불러오게 수정해 추가적으로 성능 개선을 했다.&lt;br&gt;
django에서 제공하는 Paginator라이브러리는 카운팅 쿼리 호출이 강제적이어서 함수를 새로 작성했다.&lt;/p&gt;
&lt;p&gt;편리하고 재미있는 기능을 많이 구현하더라도 서버에 과부하가 오는 등 문제가 생기면 쓸 수 없다.&lt;br&gt;
차라리 견고하고 단단한 기능 하나가 더 유용하리라 느꼈다.&lt;/p&gt;
&lt;h3 id=&#34;추가-내용&#34;&gt;추가 내용&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;게시글이 존재하는데 댓글이 없어서 빈 배열 return&lt;/li&gt;
&lt;li&gt;게시글이 존재하지 않아 빈 배열 return&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;현재 두 가지 상황을 구분하기 위해 API 요청 시 게시글 확인을 위해 쿼리 선택을 한 번 진행한다. 게시글에 대해서 댓글은 cascade 관계이므로 이 과정을 생략할지 고민 중이다.&lt;/p&gt;
&lt;h2 id=&#34;팔로우-중인-사람들의-게시글-리스트-api&#34;&gt;팔로우 중인 사람들의 게시글 리스트 API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;글 : 10000개&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;개선-전-1&#34;&gt;개선 전&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/7.png&#34;
	width=&#34;1899&#34;
	height=&#34;952&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;20032 queries in 4680.84ms&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;478px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;포스트맨으로 테스트를 진행하면 사고가 날 것을 예상해 단일 호출만 해봤다.&lt;br&gt;
처리 시간만 4680.86ms가 걸린다.&lt;/p&gt;
&lt;h3 id=&#34;개선-과정-1&#34;&gt;개선 과정&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;쿼리에 대한 조건을 나누어 생각했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;내가 팔로우 하는 사람의 전체 공개 게시글&lt;/li&gt;
&lt;li&gt;서로 팔로우 하는 사람의 친구 공개 게시글&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;두가지로 나누어 이에 대한 쿼리문을 작성 후 OR 연산을 통해 합쳤다.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;select_related()&lt;/strong&gt;
메서드를 이용하며 remit과 동일하게 serializer 부분을 수정해주었다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;아래는 코드이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#내가 팔로우한 사람들&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;followee_users&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Follow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;follower&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;followee&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#나를 팔로우한 사람들&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;follower_users&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Follow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;followee&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;follower&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 사용자가 팔로우한 사용자들의 펀딩 가져오기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fundings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Funding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objects&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author__in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;followee_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# 내가 팔로우한 사람들의 공개 펀딩&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;author__in&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;follower_users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;c1&#34;&gt;# 비공개 펀딩 중 사용자가 작성자를 팔로우한 경우&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;-created_on&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select_related&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;개선-후-1&#34;&gt;개선 후&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/django-api-improvement-nplus1/8.png&#34;
	width=&#34;1898&#34;
	height=&#34;948&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1 query in 33.39ms&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;중복 쿼리를 없앴으며, 속도가 33.39ms 로 비약적으로 상승했다.&lt;br&gt;
이후 페이징 처리를 통해 12.19ms까지 향상 시켰다.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
