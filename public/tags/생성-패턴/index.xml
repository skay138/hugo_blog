<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>생성 패턴 on ThxKyu CODE</title>
        <link>https://skay138.github.io/tags/%EC%83%9D%EC%84%B1-%ED%8C%A8%ED%84%B4/</link>
        <description>Recent content in 생성 패턴 on ThxKyu CODE</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Sat, 09 Mar 2024 00:00:10 +0900</lastBuildDate><atom:link href="https://skay138.github.io/tags/%EC%83%9D%EC%84%B1-%ED%8C%A8%ED%84%B4/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[디자인 패턴] 생성 패턴 | 팩토리 메서드</title>
        <link>https://skay138.github.io/p/design-patterns-factory-method/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:10 +0900</pubDate>
        
        <guid>https://skay138.github.io/p/design-patterns-factory-method/</guid>
        <description>&lt;img src="https://skay138.github.io/p/design-patterns-factory-method/cover.png" alt="Featured image of post [디자인 패턴] 생성 패턴 | 팩토리 메서드" /&gt;&lt;h2 id=&#34;의도&#34;&gt;의도&lt;/h2&gt;
&lt;p&gt;부모 클래스에서 객체들을 생성할 수 있는 인터페이스를 제공해 자식 클래스들이 생성될 객체들의 유형을 변경할 수 있도록 하는 생성 패턴&lt;/p&gt;
&lt;h2 id=&#34;문제&#34;&gt;문제&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;물류 관리 앱을 개발하고 있다고 가정.&lt;br&gt;
앱의 첫 번째 버전은 트럭 운송만 처리할 수 있어서 대부분의 코드가 Truck​(트럭) 클래스에 존재.&lt;/li&gt;
&lt;li&gt;해상 물류 기능을 앱에 추가해 달라는 요청 발생&lt;/li&gt;
&lt;li&gt;앱에 Ship​(선박) 클래스를 추가하려면 전체 코드 베이스를 변경해야 함.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;해결책&#34;&gt;해결책&lt;/h2&gt;
&lt;p&gt;객체 생성 직접 호출들을 팩토리 메서드에 대한 호출들로 대체.&lt;br&gt;
자식 클래스에서 팩토리 메서드를 오버라이딩하여 그 메서드에 의해 생성되는 제품들의 클래스를 변경할 수 있게 됨.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/design-patterns-factory-method/image-1.png&#34;
	width=&#34;620&#34;
	height=&#34;270&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;createTransport()를 오버라이딩 하여 이용&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;단, 공통 기초 클래스 또는 공통 인터페이스를 두어야 함.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/design-patterns-factory-method/image.png&#34;
	width=&#34;490&#34;
	height=&#34;250&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;인터페이스 예시&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;470px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;구조&#34;&gt;구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://skay138.github.io/p/design-patterns-factory-method/image-2.png&#34;
	width=&#34;660&#34;
	height=&#34;380&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;팩토리 메서드 전체 구조&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;적용-상황&#34;&gt;적용 상황&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;함께 작동해야 하는 객체들의 정확한 유형들과 의존관계들을 미리 모르는 경우&lt;/strong&gt;&lt;br&gt;
제품 생성 코드를 제품을 실제로 사용하는 코드와 분리하기에 독립적으로 확장하기 쉬워진다.&lt;br&gt;
예를 들어, 앱에 새로운 제품을 추가하려면 새로운 크리에이터 자식 클래스를 생성한 후 해당 클래스 내부의 팩토리 메서드를 오버라이딩​(재정의)​하기만 하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;라이브러리 또는 프레임워크의 사용자들에게 내부 컴포넌트들을 확장하는 방법을 제공하고 싶을 때&lt;/strong&gt;&lt;br&gt;
프레임워크 전체에서 컴포넌트들을 생성하는 코드를 단일 팩토리 메서드로 줄인 후, 누구나 이 팩토리 메서드를 오버라이드 할 수 있도록 만들 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;기존 객체들을 매번 재구축하는 대신 이들을 재사용하여 시스템 리소스를 절약하고 싶을 때&lt;/strong&gt;&lt;br&gt;
데이터베이스 연결, 파일 시스템 및 네트워크처럼 시스템 자원을 많이 사용하는 대규모 객체들을 처리할 때 자주 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;장단점&#34;&gt;장단점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;크리에이터와 구상 제품들이 단단하게 결합되지 않도록 할 수 있다.&lt;/li&gt;
&lt;li&gt;단일 책임 원칙. 제품 생성 코드를 프로그램의 한 위치로 이동하여 코드를 더 쉽게 유지관리할 수 있다.&lt;/li&gt;
&lt;li&gt;개방/폐쇄 원칙. 당신은 기존 클라이언트 코드를 훼손하지 않고 새로운 유형의 제품들을 프로그램에 도입할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패턴을 구현하기 위해 많은 새로운 자식 클래스들을 도입해야 하므로 코드가 더 복잡해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
