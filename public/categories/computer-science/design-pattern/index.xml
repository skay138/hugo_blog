<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Design Pattern on ThxKyu CODE</title>
        <link>http://localhost:1313/categories/computer-science/design-pattern/</link>
        <description>Recent content in Design Pattern on ThxKyu CODE</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <lastBuildDate>Sat, 09 Mar 2024 00:00:10 +0900</lastBuildDate><atom:link href="http://localhost:1313/categories/computer-science/design-pattern/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>[생성 패턴] 팩토리 메서드</title>
        <link>http://localhost:1313/p/design-patterns-factory-method/</link>
        <pubDate>Sat, 09 Mar 2024 00:00:10 +0900</pubDate>
        
        <guid>http://localhost:1313/p/design-patterns-factory-method/</guid>
        <description>&lt;img src="http://localhost:1313/cover/designpattern.png" alt="Featured image of post [생성 패턴] 팩토리 메서드" /&gt;&lt;h2 id=&#34;의도&#34;&gt;
    &lt;a href=&#34;#%ec%9d%98%eb%8f%84&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    의도
&lt;/h2&gt;&lt;p&gt;부모 클래스에서 객체들을 생성할 수 있는 인터페이스를 제공해 자식 클래스들이 생성될 객체들의 유형을 변경할 수 있도록 하는 생성 패턴&lt;/p&gt;
&lt;h2 id=&#34;문제&#34;&gt;
    &lt;a href=&#34;#%eb%ac%b8%ec%a0%9c&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    문제
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;물류 관리 앱을 개발하고 있다고 가정.&lt;br&gt;
앱의 첫 번째 버전은 트럭 운송만 처리할 수 있어서 대부분의 코드가 Truck​(트럭) 클래스에 존재.&lt;/li&gt;
&lt;li&gt;해상 물류 기능을 앱에 추가해 달라는 요청 발생&lt;/li&gt;
&lt;li&gt;앱에 Ship​(선박) 클래스를 추가하려면 전체 코드 베이스를 변경해야 함.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;해결책&#34;&gt;
    &lt;a href=&#34;#%ed%95%b4%ea%b2%b0%ec%b1%85&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    해결책
&lt;/h2&gt;&lt;p&gt;객체 생성 직접 호출들을 팩토리 메서드에 대한 호출들로 대체.&lt;br&gt;
자식 클래스에서 팩토리 메서드를 오버라이딩하여 그 메서드에 의해 생성되는 제품들의 클래스를 변경할 수 있게 됨.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/design-patterns-factory-method/image-1.png&#34;
	width=&#34;620&#34;
	height=&#34;270&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;createTransport()를 오버라이딩 하여 이용&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;단, 공통 기초 클래스 또는 공통 인터페이스를 두어야 함.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/design-patterns-factory-method/image.png&#34;
	width=&#34;490&#34;
	height=&#34;250&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;인터페이스 예시&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;470px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;구조&#34;&gt;
    &lt;a href=&#34;#%ea%b5%ac%ec%a1%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    구조
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/design-patterns-factory-method/image-2.png&#34;
	width=&#34;660&#34;
	height=&#34;380&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;팩토리 메서드 전체 구조&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;적용-상황&#34;&gt;
    &lt;a href=&#34;#%ec%a0%81%ec%9a%a9-%ec%83%81%ed%99%a9&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    적용 상황
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;함께 작동해야 하는 객체들의 정확한 유형들과 의존관계들을 미리 모르는 경우&lt;/strong&gt;&lt;br&gt;
제품 생성 코드를 제품을 실제로 사용하는 코드와 분리하기에 독립적으로 확장하기 쉬워진다.&lt;br&gt;
예를 들어, 앱에 새로운 제품을 추가하려면 새로운 크리에이터 자식 클래스를 생성한 후 해당 클래스 내부의 팩토리 메서드를 오버라이딩​(재정의)​하기만 하면 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;라이브러리 또는 프레임워크의 사용자들에게 내부 컴포넌트들을 확장하는 방법을 제공하고 싶을 때&lt;/strong&gt;&lt;br&gt;
프레임워크 전체에서 컴포넌트들을 생성하는 코드를 단일 팩토리 메서드로 줄인 후, 누구나 이 팩토리 메서드를 오버라이드 할 수 있도록 만들 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;기존 객체들을 매번 재구축하는 대신 이들을 재사용하여 시스템 리소스를 절약하고 싶을 때&lt;/strong&gt;&lt;br&gt;
데이터베이스 연결, 파일 시스템 및 네트워크처럼 시스템 자원을 많이 사용하는 대규모 객체들을 처리할 때 자주 발생한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;장단점&#34;&gt;
    &lt;a href=&#34;#%ec%9e%a5%eb%8b%a8%ec%a0%90&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    장단점
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;크리에이터와 구상 제품들이 단단하게 결합되지 않도록 할 수 있다.&lt;/li&gt;
&lt;li&gt;단일 책임 원칙. 제품 생성 코드를 프로그램의 한 위치로 이동하여 코드를 더 쉽게 유지관리할 수 있다.&lt;/li&gt;
&lt;li&gt;개방/폐쇄 원칙. 당신은 기존 클라이언트 코드를 훼손하지 않고 새로운 유형의 제품들을 프로그램에 도입할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;패턴을 구현하기 위해 많은 새로운 자식 클래스들을 도입해야 하므로 코드가 더 복잡해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>디자인 패턴이란?</title>
        <link>http://localhost:1313/p/design-patterns-intro/</link>
        <pubDate>Sun, 18 Feb 2024 00:00:10 +0900</pubDate>
        
        <guid>http://localhost:1313/p/design-patterns-intro/</guid>
        <description>&lt;img src="http://localhost:1313/cover/designpattern.png" alt="Featured image of post 디자인 패턴이란?" /&gt;&lt;h2 id=&#34;서론&#34;&gt;
    &lt;a href=&#34;#%ec%84%9c%eb%a1%a0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    서론
&lt;/h2&gt;&lt;p&gt;디자인 패턴을 몰라도 코딩은 할 수 있다. 하지만 트러블 슈팅에 있어 디자인 패턴도 고려해볼 수 있는가는 개발자의 유능함을 가를 수 있다고 생각한다.&lt;/p&gt;
&lt;h2 id=&#34;디자인-패턴이란&#34;&gt;
    &lt;a href=&#34;#%eb%94%94%ec%9e%90%ec%9d%b8-%ed%8c%a8%ed%84%b4%ec%9d%b4%eb%9e%80&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    디자인 패턴이란?
&lt;/h2&gt;&lt;p&gt;소프트웨어 디자인 과정에서 자주 발생하는 문제들에 대한 전형적인 해결책이다. 알고리즘도 문제에 대한 해결책이지만, 명확한 일련의 절차를 정의하는 알고리즘과는 달리 패턴은 문제에 대한 결과와 기능은 제시하나 구현 단계 및 순서는 사용자가 결정하게 된다.&lt;/p&gt;
&lt;p&gt;한마디로, 특정 문제를 해결하는 &lt;strong&gt;방식&lt;/strong&gt;에 대한 이론이다.&lt;/p&gt;
&lt;h2 id=&#34;패턴의-역사&#34;&gt;
    &lt;a href=&#34;#%ed%8c%a8%ed%84%b4%ec%9d%98-%ec%97%ad%ec%82%ac&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    패턴의 역사
&lt;/h2&gt;&lt;p&gt;패턴은 되풀이되는 사건이나 물체의 형태를 말한다. 일반적인 문제들에 대한 반복적으로 사용되는 해결책이 개념화된 것이 &lt;strong&gt;디자인 패턴&lt;/strong&gt;이다.&lt;br&gt;
패턴이라는 개념은 도시 건축에서 처음 등장한다. 상황에 따라 창문의 높이와, 건물의 층수 등을 설명할 때 제시되었으며 이는 곧 에릭 감마, 존 블리시디스, 랄프 존슨, 리처드 헬름의 4명의 작가에게 정리된다(Gang of Four &amp;gt; GoF)&lt;br&gt;
23가지 패턴을 시작으로 현재는 수많은 패턴들이 발견되고 있다.&lt;/p&gt;
&lt;h2 id=&#34;왜-패턴을-배워야-하는가&#34;&gt;
    &lt;a href=&#34;#%ec%99%9c-%ed%8c%a8%ed%84%b4%ec%9d%84-%eb%b0%b0%ec%9b%8c%ec%95%bc-%ed%95%98%eb%8a%94%ea%b0%80&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    왜 패턴을 배워야 하는가
&lt;/h2&gt;&lt;h3 id=&#34;문제의-해결&#34;&gt;
    &lt;a href=&#34;#%eb%ac%b8%ec%a0%9c%ec%9d%98-%ed%95%b4%ea%b2%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    문제의 해결
&lt;/h3&gt;&lt;p&gt;지금까지 엔지니어들이 소프트웨어를 디자인하며 발생된 일반적인 문제들에 대해 시도하고 검증된 해결책의 모음집이다. 패턴들을 인지하고 있다면 문제의 해결뿐 아니라, 다양한 종류의 문제를 해결할 때에도 응용할 수 있을 것이다.&lt;/p&gt;
&lt;h3 id=&#34;의사소통&#34;&gt;
    &lt;a href=&#34;#%ec%9d%98%ec%82%ac%ec%86%8c%ed%86%b5&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    의사소통
&lt;/h3&gt;&lt;p&gt;디자인 패턴을 알고 있다면 개념들을 설명할 필요 없이 정의된 공통 언어를 통해 소통할 수 있다. 예를 들어, 싱글턴 패턴의 개념을 나열할 필요 없이 “싱글턴 패턴을 적용해보세요”라고 말할 수 있을 것이다.&lt;/p&gt;
&lt;h2 id=&#34;패턴에-대한-비판&#34;&gt;
    &lt;a href=&#34;#%ed%8c%a8%ed%84%b4%ec%97%90-%eb%8c%80%ed%95%9c-%eb%b9%84%ed%8c%90&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    패턴에 대한 비판
&lt;/h2&gt;&lt;p&gt;모든 상황에 패턴을 적용할 필요는 없다.&lt;/p&gt;
&lt;h2 id=&#34;패턴의-분류&#34;&gt;
    &lt;a href=&#34;#%ed%8c%a8%ed%84%b4%ec%9d%98-%eb%b6%84%eb%a5%98&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    패턴의 분류
&lt;/h2&gt;&lt;h3 id=&#34;적용-범위에-따라&#34;&gt;
    &lt;a href=&#34;#%ec%a0%81%ec%9a%a9-%eb%b2%94%ec%9c%84%ec%97%90-%eb%94%b0%eb%9d%bc&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    적용 범위에 따라
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;하위 설계 패턴(이디엄) : 단일 프로그래밍 언어에만 적용할 수 있다.&lt;/li&gt;
&lt;li&gt;상위 설계 패턴(아키텍처 패턴) : 어플리케이션 전체의 구조를 설계하는 데 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;의도와-목적에-따라&#34;&gt;
    &lt;a href=&#34;#%ec%9d%98%eb%8f%84%ec%99%80-%eb%aa%a9%ec%a0%81%ec%97%90-%eb%94%b0%eb%9d%bc&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    의도와 목적에 따라
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;생성 패턴 : 기존 코드의 재활용과 유연성을 증가시키는 객체 생성 메커니즘들을 제공&lt;/li&gt;
&lt;li&gt;구조 패턴 : 구조를 유연하고 효율적으로 유지하면서 객체와 클래스를 더 큰 구조로 조합하는 방법을 설명&lt;/li&gt;
&lt;li&gt;행동 패턴 : 객체 간의 효과적인 의사소통과 책임 할당을 처리&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
